# Generate the MSSQL password to be used later when creating the Kubernetes secret.
{{- $mssqlPasswordTxtValue := ( randAlphaNum 32 )}}

{{- $existingSecret := (lookup "v1" "Secret" .Release.Namespace .Values.secrets.secretName) }}

{{- if not $existingSecret }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-secret-gen-main"
  labels:
    app.kubernetes.io/component: pre-install-hook
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation
    {{- if .Values.argoCDSupport }}
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-1"
    argocd.argoproj.io/hook-delete-policy: HookSucceeded,BeforeHookCreation
    {{ end }}
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}-secret-gen-main"
      labels:
        app.kubernetes.io/component: pre-install-hook
    spec:
      {{- if .Values.serviceAccount.name }}
      serviceAccountName: {{ .Values.serviceAccount.name | quote }}
      {{- end }}
      restartPolicy: Never
      initContainers:
      # Generate the Bitwarden installation host id and key 
      - name: generate-cloud-ids
        command:
        - "/bin/sh"
        - "-c"
        args:
        - |
          response=$(curl -s -X POST "${globalSettings__installation__apiUri}/installations" \
                       -H 'Content-Type: application/json' \
            -d '{"email": "ee-user@bitwarden.com"}')
          id=$(echo $response | jq -r '.id')
          key=$(echo $response | jq -r '.key')
          echo $id > /bitwarden/id
          echo $key > /bitwarden/key
        image: bitnami/kubectl:1.21
        volumeMounts:
        - name: temp
          mountPath: "/bitwarden"
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-config-map
      containers:
      - name: create-secret
        command:
        - "/bin/sh"
        - "-c"
        args:
        - |
          id=$(cat /bitwarden/id)
          key=$(cat /bitwarden/key)
          kubectl create secret generic {{ .Values.secrets.secretName }} -n {{ .Release.Namespace }} \
            {{-  if .Values.database.enabled }}
            --from-literal=SA_PASSWORD="{{ $mssqlPasswordTxtValue }}" \
            {{- end }}
            --from-literal=globalSettings__installation__id="$id" \
            --from-literal=globalSettings__installation__key="$key"
        image: bitnami/kubectl:1.21
        volumeMounts:
        - name: temp
          mountPath: "/bitwarden"
      volumes:
        - name: temp
          emptyDir:
            medium: Memory
{{- end }}

# Display secrets with a pod
---
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-secret-gen-display"
  labels:
    app.kubernetes.io/component: pre-install-hook
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation
    {{- if .Values.argoCDSupport }}
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "0"
    argocd.argoproj.io/hook-delete-policy: HookSucceeded,BeforeHookCreation
    {{ end }}
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}-secret-gen-display"
      labels:
        app.kubernetes.io/component: pre-install-hook
    spec:
      {{- if .Values.serviceAccount.name }}
      serviceAccountName: {{ .Values.serviceAccount.name | quote }}
      {{- end }}
      restartPolicy: Never
      containers:
      - name: display-secrets
        command:
        - "/bin/sh"
        - "-c"
        args:
        - |
          echo "###### {{ .Release.Name }} Secrets ######"

          echo "###### Database ######"
          echo "SA_PASSWORD: $SA_PASSWORD"

          echo "###### Bitwarden ######"
          echo "globalSettings__installation__id: $globalSettings__installation__id"
          echo "globalSettings__installation__key: $globalSettings__installation__key"
        image: {{ .Values.supportComponents.kubectl.image.name }}:{{ .Values.supportComponents.kubectl.image.tag }}
        envFrom:
        - secretRef:
            name: {{ .Values.secrets.secretName }}


# Create the Bitwarden Secrete Manager machine account secret
# ---
# apiVersion: spv.no/v2beta1
# kind: AzureKeyVaultSecret
# metadata:
#   name: sm-ephemeral-env-machine-account
#   labels:
#     app.kubernetes.io/component: pre-install-hook
#   annotations:
#     "helm.sh/hook": pre-install
#     "helm.sh/hook-weight": "0"
#     {{- if .Values.argoCDSupport }}
#     argocd.argoproj.io/hook: PreSync
#     argocd.argoproj.io/sync-wave: "-1"
#     {{ end }}
# spec:
#   vault:
#     name: bw-cluster-mmartin # name of key vault
#     object:
#       name: sm-ephemeral-env-machine-account # name of the akv object
#       type: secret # akv object type
#   output: # optional - only used to sync to a kubernetes secret
#     secret: 
#       name: sm-ephemeral-env-machine-account # kubernetes secret name
#       dataKey: BWS_ACCESS_TOKEN # key to store object value in kubernetes secret

# # Create the Secret Manager project
# ---
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: "{{ .Release.Name }}-secret-manager-setup"
#   labels:
#     app.kubernetes.io/component: pre-install-hook
#   annotations:
#     "helm.sh/hook": pre-install, pre-upgrade
#     "helm.sh/hook-weight": "0"
#     {{- if .Values.argoCDSupport }}
#     argocd.argoproj.io/hook: PreSync
#     argocd.argoproj.io/sync-wave: "-1"
#     {{ end }}
# spec:
#   template:
#     metadata:
#       name: "{{ .Release.Name }}-secret-manager-setup"
#       labels:
#         app.kubernetes.io/component: pre-install-hook
#     spec:
#       {{- if .Values.serviceAccount.name }}
#       serviceAccountName: {{ .Values.serviceAccount.name | quote }}
#       {{- end }}
#       restartPolicy: Never
#       initContainers:
#       # Create the Secret Manager project
#       - name: create-secret-manager-project
#         command:
#         - "/bin/sh"
#         - "-c"
#         args:
#         - |
#           # Install the Bitwarden Secret Manager CLI
#           curl https://bws.bitwarden.com/install | sh

#           SECRET_MANAGER_SERVER_URI={{ .Values.general.cloudSecretManagerUri | quote | default "https://vault.bitwarden.com" }}
#           {{- if eq .Values.general.cloudRegion "EU" }}
#           SECRET_MANAGER_SERVER_URI={{ .Values.general.cloudSecretManagerUri | quote | default "https://vault.bitwarden.eu" }}
#           {{- end }}

#           SECRET_MANAGER_PROJECT_NAME="{{ .Release.Name }}"
#           SECRET_MANAGER_PROJECT_ID=$(bws project create --server-url $SECRET_MANAGER_SERVER_URI --name $SECRET_MANAGER_PROJECT_NAME | jq -r '.id')
#           echo $SECRET_MANAGER_PROJECT_ID
#           echo $SECRET_MANAGER_PROJECT_ID > /bitwarden/sm-project-id
#           echo $SECRET_MANAGER_SERVER_URI > /bitwarden/sm-server-uri
#         # image: "{{ .Values.supportComponents.kubectl.image.name }}:{{ .Values.supportComponents.kubectl.image.tag }}"
#         image: alpine:latest
#         envFrom:
#         - secretRef:
#             name: sm-ephemeral-env-machine-account
#         volumeMounts:
#         - name: temp
#           mountPath: "/bitwarden"
#       containers:
#       - name: create-secret-manager-secrets
#         command:
#         - "/bin/sh"
#         - "-c"
#         args:
#         - |
#           # Install the Bitwarden Secret Manager CLI
#           curl https://bws.bitwarden.com/install | sh
          
#           SECRET_MANAGER_PROJECT_ID=$(cat /bitwarden/sm-project-id)
#           SECRET_MANAGER_SERVER_URI=$(cat /bitwarden/sm-server-uri)

#           # Create MSSQL secret
#           bws secret create --server-url $SECRET_MANAGER_SERVER_URI --project-id $SECRET_MANAGER_PROJECT_ID mssql-password "{{ $mssqlPasswordTxtValue }}"
#         image: bitwarden/bws:latest
#         envFrom:
#         - secretRef:
#             name: sm-ephemeral-env-machine-account
#         - secretRef:
#             name: {{ .Values.secrets.secretName }}
#         volumeMounts:
#         - name: temp
#           mountPath: "/bitwarden"
#       volumes:
#       - name: temp
#         emptyDir:
#           medium: Memory



